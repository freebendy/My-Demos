#ifndef SHELLSORT_H
#define SHELLSORT_H

#include "common.h"

/** 希尔排序，也称递减增量排序算法，是插入排序的一种高速而稳定的改进版本。
  *
  * 改进:
  *     1.插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
  *     2.但插入排序一般来说是低效的 因为插入排序每次只能将数据移动一位
  *
  * 最好的时间复杂度： O(n*logn*logn)
  *
  * 与梳排序一样，关键在于选择适当的步长。比较在shell排序中是最主要的操作，而不是交换。
  *
  * 已知的最好步长序列由Marcin Ciura设计（1，4，10，23，57，132，301，701，1750，…）
  * 这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长序列的希尔排序比插
  * 入排序和堆排序都要快，甚至在小数组中比快速排序还快，但是在涉及大量数据时希尔排序还是比快
  * 速排序慢。
  *
  * 另一个在大数组中表现优异的步长序列是(斐波那契数列除去0和1将剩余的数以黄金分割比的两倍的幂
  * 进行运算得到的数列)：（1, 9, 34, 182, 836, 4025, 19001, 90358, 428481, 2034035, 9651787, 45806244, 217378076, 1031612713, …）
  */

void shellSort( int array[], int length )
{
    int gap = length / 2;

    while ( gap > 0 )
    {
        for ( int i = gap; i < length; i = i + gap )
        {
            for ( int j = i; j > 0 ; j = j - gap )
            {
                if ( array[j] < array[j - gap] )
                {
                    swap( array[j], array[j - gap] );
                }
            }
        }
        gap /= 2;
    }
}

#endif // SHELLSORT_H
